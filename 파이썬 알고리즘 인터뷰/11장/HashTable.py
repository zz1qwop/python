# 해시 테이블 또는 해시 맵은 키를 값에 매핑할 수 있는 구조인, 연관 배열 추상 자료형(ADT)을 구현하는 자료구조다.
# 해시 테이블의 가장 큰 특징은 대부분의 연산이 분할 상환 분석에 따른 시간 복잡도가 O(1)이라는 점이다.


# < 해시 >
# 해시 함수란 임의 크기 데이터를 고정 크기 값으로 매핑하는 데 사용할 수 있는 함수를 말한다.
# 해싱 : 해시 테이블을 인덱싱하기 위해 해시 함수를 사용하는 것.

# 성능 좋은 해시 함수들의 특징
# 1. 해시 함수 값 충돌의 최소화
# 2. 쉽고 빠른 연산
# 3. 해시 테이블 전체에 해시 값이 균일하게 분포
# 4. 사용할 키의 모든 정보를 이용하여 해싱
# 5. 해시 테이블 사용 효율이 높을 것

# 생일 문제
# 여러 사람이 모였을 때 생일이 같은 2명이 존재할 확률 : 23명만 모여도 50%를 넘고, 57명이 모이면 99%를 넘어선다.
# 충돌은 생각보다 쉽게 일어나므로 충돌을 최소화하는 일은 무엇보다 중요.
import random
TRIALS = 100000 # 10만 번 실험
same_birthdays = 0 # 생일이 같은 실험의 수

for _ in range(TRIALS):
    birthdays = []
    for i in range(23):
        birthday = random.randint(1, 365)
        if birthday in birthdays:
            same_birthdays += 1
            break
        birthdays.append(birthday)

print(f'{same_birthdays / TRIALS * 100}%') # 50.708%


# 비둘기집 원리
# n개 아이템을 m개 컨테이너에 넣을 때, n > m이라면 적어도 하나의 컨테이너에는 반드시 2개 이상의 아이템이 들어 있다는 원리.
# ex. n = 10, m = 9. 좋은 해시 함수라면 충돌을 최소화하여 단 1번의 충돌만 일어나게 하지만,
# 좋지 않은 해시 함수의 경우 심하면 9번 모두 충돌해 9개의 공간 중 1개밖에 사용하지 못할 수도 있다.

# 로드 팩터
# 해시 테이블에 저장된 데이터 개수 n을 버킷의 개수 k로 나눈 것이다.
# 로드 팩터 비율에 따라 해시 함수를 재작성해야 될지 또는 해시 테이블의 크기를 조정해야 할지를 결정한다.
# 이 값은 해시 함수가 키들을 잘 분산해 주는지를 말하는 효율성 측정에도 사용된다.
# 일반적으로 로드 팩터가 증가할수록 해시 테이블의 성능은 점점 감소한다.

# 해시 함수
# 해싱 알고리즘 : 여기서는 정수형 해싱 기법인 모듈로 연산을 이용한 나눗셈 방식을 살펴본다.
# h(x) = x mod m
# m : 해시 테이블의 크기. 


# <충돌>
# 개별 체이닝
# 충돌 발생 시 연결 리스트로 연결한다.

# 오픈 어드레싱
# 충돌 발생 시 탐사를 통해 빈 공간을 찾아나서는 방식.
# 전체 슬롯 개수 이상은 저장할 수 없다.
# 오픈 어드레싱 방식 중 하나 : 선형 탐사 - 충돌이 발생할 경우 해당 위치부터 순차적으로 탐사를 하나씩 진행함.
# 선형 탐사의 문제점 : 클러스터링
# 클러스터링 : 해시 테이블 여기저기에 연속된 데이터 그룹이 생기는 현상. 탐사 시간을 오래 걸리게 하며, 해싱 효율을 떨어뜨림.